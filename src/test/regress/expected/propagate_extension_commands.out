CREATE SCHEMA "extension'test";
-- use  a schema name with escape character
SET search_path TO "extension'test";
-- create an extension on the given search_path
-- the extension is on contrib, so should be avaliable for the regression tests
CREATE EXTENSION hstore;
--  make sure that both the schema and the extension is distributed
SELECT count(*) FROM citus.pg_dist_object WHERE objid = (SELECT oid FROM pg_extension WHERE extname = 'hstore');
 count 
-------
     1
(1 row)

SELECT count(*) FROM citus.pg_dist_object WHERE objid = (SELECT oid FROM pg_namespace WHERE nspname = 'extension''test');
 count 
-------
     1
(1 row)

CREATE TABLE test_table (key int, value hstore);
SELECT create_distributed_table('test_table', 'key');
 create_distributed_table 
--------------------------
 
(1 row)

--  make sure that the table is also distributed object now
SELECT count(*) from pg_dist_partition where logicalrelid='extension''test.test_table'::regclass;
 count 
-------
     1
(1 row)

CREATE TYPE two_hstores AS (hstore_1 hstore, hstore_2 hstore);
-- verify that the type that depends on the extension is also marked as distributed
SELECT count(*) FROM citus.pg_dist_object WHERE objid = (SELECT oid FROM pg_type WHERE typname = 'two_hstores' AND typnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'extension''test'));
 count 
-------
     1
(1 row)

-- now CREATE EXTENSION within a transction block and with version defined
BEGIN;
	CREATE EXTENSION isn WITH VERSION '1.1' SCHEMA public;
	-- make sure that the object is distributed 
	SELECT count(*) FROM citus.pg_dist_object WHERE objid = (SELECT oid FROM pg_extension WHERE extname = 'isn');
 count 
-------
     1
(1 row)

	-- now, create a reference table relying on the data types
	CREATE TABLE ref_table (a public.issn);
	SELECT create_reference_table('ref_table');
 create_reference_table 
------------------------
 
(1 row)

	-- now, update to a newer version
	ALTER EXTENSION isn UPDATE TO '1.2';
	-- now change the schema
	ALTER EXTENSION isn SET SCHEMA "extension'test";
	-- show that the ALTER EXTENSION commands are propagated
	SELECT run_command_on_workers($$SELECT extnamespace FROM pg_extension WHERE extname = 'isn'$$);
 run_command_on_workers 
------------------------
 (localhost,57637,t,"")
 (localhost,57638,t,"")
(2 rows)

	SELECT run_command_on_workers($$SELECT extversion FROM pg_extension WHERE extname = 'isn'$$);
 run_command_on_workers 
------------------------
 (localhost,57637,t,"")
 (localhost,57638,t,"")
(2 rows)

ROLLBACK;
-- at the end of the transaction block, we did not create isn extension in coordinator or worker nodes as we rollback'ed
-- make sure that the extension is not distributed anymore
SELECT count(*) FROM citus.pg_dist_object WHERE objid = (SELECT oid FROM pg_extension WHERE extname = 'isn');
 count 
-------
     0
(1 row)

-- and the extension is dropped on the workers
SELECT run_command_on_workers($$SELECT count(*) FROM pg_extension WHERE extname = 'isn'$$);
 run_command_on_workers 
------------------------
 (localhost,57637,t,0)
 (localhost,57638,t,0)
(2 rows)

-- try setting the schema outside of the transaction block
ALTER EXTENSION hstore SET SCHEMA "public";
-- TODO: give a notice for the following commands saying that it is not
-- propagated to the workers. the user should run it manually on the workers 
-- ALTER EXTENSION name ADD member_object
-- ALTER EXTENSION name DROP member_object
DROP EXTENSION hstore CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to column value of table test_table
drop cascades to column hstore_2 of composite type two_hstores
drop cascades to column hstore_1 of composite type two_hstores
-- drop multiple extensions at the same time
CREATE EXTENSION hstore;
CREATE EXTENSION isn WITH VERSION '1.1' SCHEMA public;
-- lets another extension locally
set citus.enable_ddl_propagation to 'off';
CREATE EXTENSION pg_buffercache;
set citus.enable_ddl_propagation to 'on';
-- restrict should fail but cascade should work
DROP EXTENSION hstore, isn RESTRICT; 
DROP EXTENSION hstore, isn CASCADE;
ERROR:  extension "hstore" does not exist
-- create/drop extension in a transaction block
BEGIN;
	CREATE EXTENSION hstore;
	DROP EXTENSION hstore CASCADE;
COMMIT;
-- make sure that the extension is not avaliable anymore as a distributed object
SELECT count(*) FROM citus.pg_dist_object WHERE objid = (SELECT oid FROM pg_extension WHERE extname IN ('hstore', 'isn'));
 count 
-------
     0
(1 row)

-- but the schema should still be distributed
SELECT count(*) FROM citus.pg_dist_object WHERE objid = (SELECT oid FROM pg_type WHERE pg_type = 'extension''test');
ERROR:  input of anonymous composite types is not implemented
LINE 1: ... objid = (SELECT oid FROM pg_type WHERE pg_type = 'extension...
                                                             ^
-- version
-- WITH schema
-- CASACADE
CREATE EXTENSION hstore;
DROP SCHEMA "extension'test" CASCADE;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table test_table
drop cascades to type two_hstores
drop cascades to extension pg_buffercache
drop cascades to extension hstore
-- make sure that dropping the schema removes the distributed object 
SELECT count(*) FROM citus.pg_dist_object WHERE objid = (SELECT oid FROM pg_extension WHERE extname IN ('hstore'));
 count 
-------
     0
(1 row)

-- as we do not propagate DROP SCHEMA to workers for now, let's drop them manually
SELECT run_command_on_workers($$DROP SCHEMA "extension'test" CASCADE$$);
      run_command_on_workers       
-----------------------------------
 (localhost,57637,t,"DROP SCHEMA")
 (localhost,57638,t,"DROP SCHEMA")
(2 rows)

